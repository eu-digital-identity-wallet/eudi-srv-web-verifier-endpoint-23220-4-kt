/*
 * Copyright (c) 2023 European Commission
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package eu.europa.ec.eudi.verifier.endpoint.adapter.out.mso

import arrow.core.NonEmptyList
import arrow.core.toNonEmptyListOrNull
import eu.europa.ec.eudi.verifier.endpoint.adapter.out.cert.ProvideTrustSource
import eu.europa.ec.eudi.verifier.endpoint.adapter.out.cert.X5CShouldBe
import kotlinx.coroutines.test.runTest
import org.springframework.core.io.DefaultResourceLoader
import java.io.InputStream
import java.security.KeyStore
import java.security.cert.X509Certificate
import java.time.Clock
import java.time.LocalDate
import java.time.LocalTime
import java.time.ZonedDateTime
import java.util.*
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertIs
import kotlin.test.assertNotNull

object Data {

    /**
     * Contains three documents,
     * The first and the second are valid
     * The 3d has expired validity info
     */
    val ThreeDocumentVP =
        """
        
        """.trimIndent()

    /**
     * An mDL with invalid chain
     */
    val MdlVP =
        """
        o2d2ZXJzaW9uYzEuMGlkb2N1bWVudHOBo2dkb2NUeXBldW9yZy5pc28uMTgwMTMuNS4xLm1ETGxpc3N1ZXJTaWduZWSiam5hbWVTcGFjZXOhcW9yZy5pc28uMTgwMTMuNS4xhNgYWImkZnJhbmRvbVhA749knalJ0xgtGBK1lVhhXe8D-beFtIiXyln1UhmTPKmbNmTwvolOya3h-_AyFE2MqCom3sBYs8VylU238nkOTGhkaWdlc3RJRA5sZWxlbWVudFZhbHVlaUFOREVSU1NPTnFlbGVtZW50SWRlbnRpZmllcmtmYW1pbHlfbmFtZdgYWIOkZnJhbmRvbVhAvzy0xTmV9BWSqTH1L5LO5KFazP-kCsBiHu3agh_dFhynMj0SLBaWYfNPrXPSK7wUIwuPquplYgA4Lb1zGEFzt2hkaWdlc3RJRBgmbGVsZW1lbnRWYWx1ZWNKQU5xZWxlbWVudElkZW50aWZpZXJqZ2l2ZW5fbmFtZdgYWI2kZnJhbmRvbVhAvDJWC3eMvjG57CkfQlaBdjIY7Yf2NNvTr27KpwdQ4kYrSSQhsOJATDiIXZeAP7bVqdvdO7Zni0NUIVDHSteSSGhkaWdlc3RJRBhCbGVsZW1lbnRWYWx1ZdkD7GoxOTg1LTAzLTMwcWVsZW1lbnRJZGVudGlmaWVyamJpcnRoX2RhdGXYGFiUpGZyYW5kb21YQO13H9R-OzlZjjFEcIwqERO9RaruJZWsGolT5X6qpSvMEGGCjBOMx1mVl2jl24K-C_pe-SdAEFhwc_KcXkoBI7VoZGlnZXN0SUQPbGVsZW1lbnRWYWx1ZcB0MjAwOS0wMS0wMVQwMDowMDowMFpxZWxlbWVudElkZW50aWZpZXJqaXNzdWVfZGF0ZWppc3N1ZXJBdXRohEOhASahGCFZAoUwggKBMIICJqADAgECAgkWSuWZAtwFEGQwCgYIKoZIzj0EAwIwWDELMAkGA1UEBhMCQkUxHDAaBgNVBAoTE0V1cm9wZWFuIENvbW1pc3Npb24xKzApBgNVBAMTIkVVIERpZ2l0YWwgSWRlbnRpdHkgV2FsbGV0IFRlc3QgQ0EwHhcNMjMwNTMwMTIzMDAwWhcNMjQwNTI5MTIzMDAwWjBlMQswCQYDVQQGEwJCRTEcMBoGA1UEChMTRXVyb3BlYW4gQ29tbWlzc2lvbjE4MDYGA1UEAxMvRVUgRGlnaXRhbCBJZGVudGl0eSBXYWxsZXQgVGVzdCBEb2N1bWVudCBTaWduZXIwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAR8kxP0waSqTrCz62gRpJlOWd5nmWQxwvOuCI63oQYctli9jDkSbBlZeskN-Z0HjT7zkTujS9ssvGmH0Cfpr538o4HLMIHIMB0GA1UdDgQWBBTRpLEkOTL7RXJymUjyUn2VWKdNLTAfBgNVHSMEGDAWgBQykesOHAEdFA52T2xP6kyWONr7BDAOBgNVHQ8BAf8EBAMCB4AwEgYDVR0lBAswCQYHKIGMXQUBAjAfBgNVHRIEGDAWhhRodHRwOi8vd3d3LmV1ZGl3LmRldjBBBgNVHR8EOjA4MDagNKAyhjBodHRwczovL3N0YXRpYy5ldWRpdy5kZXYvcGtpL2NybC9pc28xODAxMy1kcy5jcmwwCgYIKoZIzj0EAwIDSQAwRgIhAN5fmOce9ldSEmvyxLhP3t-B0kPKV7Fb0xiqufHr6z99AiEA_iL3MmtLV1j_Fv6G0zqNjSmIIWnaBJtaXiyAarFHCEhZBmTYGFkGX6ZndmVyc2lvbmMxLjBvZGlnZXN0QWxnb3JpdGhtZ1NIQS0yNTZnZG9jVHlwZXVvcmcuaXNvLjE4MDEzLjUuMS5tRExsdmFsdWVEaWdlc3RzoXFvcmcuaXNvLjE4MDEzLjUuMbglDlggkkOj-6hAjWfN8o9jhSncYFJQ0fDBxRBStdnWv_8nZB0YJlggHD3d1-rVoh_It7pmbn7ZZjSb1OtaHXET-vOpPKgXvdcYQlgg_PH--h2tMOyeAMIK_AyyAqgMeSmpqSyh-fKp-RzvR5UPWCAtYbt8x-FV3n8vug3QNaDzTW9NZYR6EKYxapriNQk-egpYID5ee-HsMz5HD4NRZYEYmqYhapqw3TILJx4tIjom6SvOBVgg_72Y-M6CJBy7beNYhE6bpTlEkRIbQ1A4p25E3_MrKQUYWVggHyw4N0q-2ZY-7HWGb4VNqCSJuQ7dCWN5P1VNuSjiPv4YZlggx1SWAXewxOaPu022Kcx7T7wTjc4y7vmLtgtKYOUuoHwYGVgg8hoS1uF5wPOckGMZ-uwJ5i_dfrB49w45fuP6WFrGnagIWCCpXnUkg0HFUsG2ooBy19RM2wMXZlC9fsDCgFu40KiDaBhAWCASqDJUAZeie5vDlaT-WVf6aQ5_TC225Gk0dFXPc1Uy7A1YIJTv_fqKHmZ1jVrB_Jh4rZLmgRQ4lMi59JqA6u45gaFLGDJYIANaiahebONUwWUXoizeac8ArnfaVjqaK3SOSkktKtNqGCFYIKJ--Ol3d5RmvL-C9lyTl-SLCyDLXFohrX0uZPn4F_ZDGD9YIOymcKB-tuLfl75WvkFgQ3V29nolL1wrR-VtuPUUiJZpGC5YIIYCq9EgqzXF_1xfpBomrXEv_UT1DJIZnpbkOYAFZjWaGElYIM8ineKdyI5xQH704kgiNsTwBPHqiX4Fl95h8aCm0ysHCVgglhk1fNxfOyp6WD7KQ9SxlYVvIZv71KdXUe2o3rOpmWEYJ1ggzNeoHyw9M_D7sAdqm_4Wk26gfRT4N_ECn95zZUDJlmsYX1ggU-obG-GsD2yYjRFJjW4Zzhpt1oWwCN6sw5cDkDnZU0UYKlggMJpODSrV3RosBjudUNh186RnBTJuE4mLsxy9BdJzssoYT1ggcj9wzitw_eHjhExGvXUnqLzzSRHKUzmVXkdheGyXjHQYSFgguv6QoagYTCfTHxwqejsNIddHIBr1epPrEtf6kmTFqggYPVggGSy9_z8QoAyHJWohY5qk6J1ts3uEOw2NZ7UzQ2hhhzsYU1ggelpUst7GN_S83C10Kl6TV-67vlp1KrCjQ1eUw_IOEZEYUFgg7l1_1kX6wsqid3gqMAmUpytUaF6rbvzJa8qBho5UtFsYQ1ggRFYV3ASPVs91_Pq49A8-FPBWMSlGfJEDtx6U9QGDdYcUWCCddIVod3NO1J-CianCUPazTCSmR5EoxYod8OICcR7M0BhSWCAg4D5ttNjoHKpkGFk9fXx7rzM5I8uK3-z3DesxaPW6Vxg5WCAYgBGGSyFyThlECkdExwQlV6vK-IaeGbxEcTZT1-jAaxhiWCA6joyHq7zvmdx5dGECtdbVbMde-zzoxNAsEs_0tISBKBFYIIJEG-CdR1CN7xp6lnwmj0y9yMX0UQAZfcy0rC48nKIxDFggRo6NNXweSIpoI8c4NSda5R9zHjO43AXc0bkiUofwnKkYOlggOyBuX5Her6s_ZFG9VRCaCX_ImtnSfzYF_MP8r9raUVUYTVggG9Sqh2I18AmWpxYTrGsfv4jh3PS_5o8zCOOLdTV5MUAYVlggKbH3AZnwQU6448Ef4-NV3dBwAkAYjkk6s0ezs0lE0mMYVFggR-sRxzD1B4U224dBR5Zk-vixJXwOFBIWXcysExJN99NtZGV2aWNlS2V5SW5mb6FpZGV2aWNlS2V5pAECIAEhWCBDDtpcwH3siSXBoDgBOGFYu_d7YJTeHlSEUvE3I851ASJYINkipi0KQaoI8x6Lu2WNQJLJY8WgUaT6n-WkEj1KiRm_bHZhbGlkaXR5SW5mb6Nmc2lnbmVkwHQyMDI0LTA5LTAzVDA5OjQ2OjE2Wml2YWxpZEZyb23AdDIwMjQtMDktMDNUMDk6NDY6MTZaanZhbGlkVW50aWzAdDIwMjUtMDktMDNUMDk6NDY6MTZaWEDrktGVkgavhQ4LnnkyDUi_YvxF1M4gJt15CUuYvjbPb6Qnsg8OpFC1GT_D2MdJhwYMEVbY4z-qCRqrA8yIWMJqbGRldmljZVNpZ25lZKJqbmFtZVNwYWNlc9gYQaBqZGV2aWNlQXV0aKFvZGV2aWNlU2lnbmF0dXJlhEOhASag9lhAQyIROFA1Q6OQx7eBYqxxBX52xAhYj_aMuTI9M8ZwoRfNP0RuMUn45LwrkeoaJGg4ksiD9rcqh1qG9NBF9nadu2ZzdGF0dXMA
        """.trimIndent()

    val caCerts: NonEmptyList<X509Certificate> by lazy {
        DefaultResourceLoader()
            .getResource("classpath:trusted-issuers.jks")
            .inputStream
            .use { inputStream ->
                val keyStore = loadKeystore(inputStream)
                val certs = X5CShouldBe.trustedCAs(keyStore).toNonEmptyListOrNull()
                requireNotNull(certs) { "Unable to load X509 Certificates from 'classpath:trusted-issuers.jks'" }
            }
    }

    private fun loadKeystore(inputStream: InputStream): KeyStore =
        KeyStore.getInstance("JKS").apply { load(inputStream, null) }
}

class DeviceResponseValidatorTest {

    private val clock = run {
        val instant = ZonedDateTime.of(
            LocalDate.of(2024, 11, 1),
            LocalTime.MIDNIGHT,
            TimeZone.getTimeZone("Europe/Athens").toZoneId(),
        )
        Clock.fixed(instant.toInstant(), instant.zone)
    }

    @Test
    fun `a vp_token where the 3d document has an invalid validity info should fail`() = runTest {
        val invalidDocument = run {
            val validator = deviceResponseValidator(Data.caCerts, clock)
            val validated = validator.ensureValid(Data.ThreeDocumentVP)
            val invalidDocuments =
                assertIs<DeviceResponseError.InvalidDocuments>(validated.leftOrNull())
                    .invalidDocuments
            assertEquals(1, invalidDocuments.size)
            invalidDocuments.head
        }

        assertEquals(2, invalidDocument.index)
        val documentError = run {
            assertEquals(1, invalidDocument.errors.size)
            invalidDocument.errors.head
        }
        assertIs<DocumentError.ExpiredValidityInfo>(documentError)
    }

    @Test
    fun `a vp_token where the 3d document has an invalid validity info should not fail when skip`() = runTest {
        val validDocuments = run {
            val trustSources = ProvideTrustSource.forAll(
                X5CShouldBe.Trusted(Data.caCerts) {
                    isRevocationEnabled = false
                    date = Date.from(clock.instant())
                },
            )

            val docV = DocumentValidator(
                clock = clock,
                validityInfoShouldBe = ValidityInfoShouldBe.Ignored,
                provideTrustSource = trustSources,
            )
            val vpValidator = DeviceResponseValidator(docV)
            val validated = vpValidator.ensureValid(Data.ThreeDocumentVP)
            assertNotNull(validated.getOrNull())
        }

        assertEquals(3, validDocuments.size)
    }

    @Test
    fun `a vp_token having a single document with invalid chain should fail`() = runTest {
        val invalidDocument = run {
            val validated = deviceResponseValidator(Data.caCerts, clock).ensureValid(Data.MdlVP)
            val invalidDocuments =
                assertIs<DeviceResponseError.InvalidDocuments>(validated.leftOrNull())
                    .invalidDocuments
            assertEquals(1, invalidDocuments.size)
            invalidDocuments.head
        }
        assertEquals(0, invalidDocument.index)
        val documentError = run {
            assertEquals(1, invalidDocument.errors.size)
            invalidDocument.errors.head
        }
        assertIs<DocumentError.X5CNotTrusted>(documentError)
    }

    @Test
    fun `a vp_token having a single document skipping chain validation should be valid`() = runTest {
        val validDocuments = run {
            val docV = DocumentValidator(provideTrustSource = ProvideTrustSource.Ignored)
            val vpValidator = DeviceResponseValidator(docV)
            val validated = vpValidator.ensureValid(Data.MdlVP)
            assertNotNull(validated.getOrNull())
        }

        assertEquals(1, validDocuments.size)
    }
}

private fun deviceResponseValidator(caCerts: NonEmptyList<X509Certificate>, clock: Clock): DeviceResponseValidator {
    val x5CShouldBe = X5CShouldBe.Trusted(Data.caCerts) {
        isRevocationEnabled = false
        date = Date.from(clock.instant())
    }
    val documentValidator = DocumentValidator(
        clock,
        ValidityInfoShouldBe.NotExpired,
        IssuerSignedItemsShouldBe.Verified,
        provideTrustSource = ProvideTrustSource.forAll(x5CShouldBe),
    )
    return DeviceResponseValidator(documentValidator)
}
